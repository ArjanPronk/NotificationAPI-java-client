/*
 * NotificationAPI api
 * ## üëã Introduction  Welcome to the [NotificationAPI](https://notificationapi.com/) API Docs üöÄ  ## üõü Help and support  We are gradually documenting our APIs üê¢ If you don't see something, just send us a message in the chat, and we'll get it updated in minutes üêá  ## Glossary  - `envId` refers to the account or environment you are modifying - `user` refers to an end-user, the recipient of notifications - `member` refers to your team members with access to the dashboard - `notification` refers to a notification type that you configure in our dashboard, for example: `new_comment_notification`
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pronk.dev.notificationapi.client;

import pronk.dev.notificationapi.client.utils.ApiException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InAppApi
 */
class InAppApiTest {

    private final InAppApi api = new InAppApi();

    /**
     * Get in-app notifications
     *
     * Gets the user&#39;s in-app notifications from newest to oldest.  The before parameter is optional and is used for the pagination. Recommended workflow:  1. Request the first page of notifications (no before) 2. Store the timestamp of the oldest notification (the last notification in the response array since the array is sorted chronologically) 3. Pass that value as the \&quot;before\&quot; parameter for the next API call       The \&quot;before\&quot; parameter is inclusive (less than and equals) to ensure notifications that are stored within one millisecond are not missed. This results in repeated notifications being returned. Make sure to drop response notifications with the same ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    void clientIdUsersUserIdNotificationsINAPPWEBGetTest() throws ApiException {
        //
        //String clientId = null;
        //
        //String userId = null;
        //
        //String accept = null;
        //
        //Object response = api.clientIdUsersUserIdNotificationsINAPPWEBGet(clientId, userId, accept);

        // TODO: test validations
    }
    /**
     * Get unread count
     *
     * Returns the number of unread in-app notifications.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    void clientIdUsersUserIdUnreadINAPPWEBGetTest() throws ApiException {
        //
        //String clientId = null;
        //
        //String userId = null;
        //
        //String accept = null;
        //
        //Object response = api.clientIdUsersUserIdUnreadINAPPWEBGet(clientId, userId, accept);

        // TODO: test validations
    }
    /**
     * Mark notification as read
     *
     * This method is used to mark one or all notifications of the user as read.  - To mark all as read: pass an empty object in body: &#x60;{}&#x60;      - To mark a single notification, use the notification&#39;s &#x60;trackingId&#x60; in the body
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    void clientIdUsersUserIdUnreadINAPPWEBPatchTest() throws ApiException {
        //
        //String clientId = null;
        //
        //String userId = null;
        //
        //Object body = null;
        //
        //Object response = api.clientIdUsersUserIdUnreadINAPPWEBPatch(clientId, userId, body);

        // TODO: test validations
    }
}
